class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
class BinarySearchTree:
    def __init__(self):
        self.root = None
    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert(self.root, key)
    def _insert(self, current, key):
        if key < current.key:
            if current.left is None:
                current.left = Node(key)
            else:
                self._insert(current.left, key)
        elif key > current.key:
            if current.right is None:
                current.right = Node(key)
            else:
                self._insert(current.right, key)
    def search(self, key):
        return self._search(self.root, key)
    def _search(self, current, key):
        if current is None:
            return False
        if key == current.key:
            return True
        elif key < current.key:
            return self._search(current.left, key)
        else:
            return self._search(current.right, key)
    def in_order_traversal(self):
        result = []
        self._in_order_traversal(self.root, result)
        return result
    def _in_order_traversal(self, current, result):
        if current:
            self._in_order_traversal(current.left, result)
            result.append(current.key)
            self._in_order_traversal(current.right, result)
# Usage example
if __name__ == "__main__":
    bst = BinarySearchTree()
    bst.insert(50)
    bst.insert(30)
    bst.insert(70)
    bst.insert(20)
    bst.insert(40)
    bst.insert(60)
    bst.insert(80)
    print("Search for 40:", bst.search(40))  # Output: True
    print("Search for 100:", bst.search(100))  # Output: False
    print("In-order Traversal:", bst.in_order_traversal())  # Output: [20, 30, 40, 50, 60, 70, 80]

